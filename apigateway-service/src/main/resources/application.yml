server:
  port: 8000

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

spring:
  application:
    name: apigateway-service
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
  config:
    import:
      - classpath:/bootstrap.yml
  cloud:
    gateway:
      default-filters:
        - name: GlobalFilter
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true
      routes:
#        - id: user-service
#          uri: lb://USER-SERVICE
#          predicates: # 조건절
#            - Path=/user-service/**
        - id: user-service
          uri: lb://USER-SERVICE
          predicates: # 조건절
            - Path=/user-service/login
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie # POST로 전달되는 데이터를 매번 새롭게 인식하기 위해
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: user-service
          uri: lb://USER-SERVICE
          predicates: # 조건절
            - Path=/user-service/users
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie # POST로 전달되는 데이터를 매번 새롭게 인식하기 위해
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: user-service
          uri: lb://USER-SERVICE
          predicates: # 조건절
            - Path=/user-service/**
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie # POST로 전달되는 데이터를 매번 새롭게 인식하기 위해
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
            - AuthorizationHeaderFilter
        - id: user-service
          uri: lb://USER-SERVICE
          predicates: # 조건절
            - Path=/user-service/actuator/**
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie # POST로 전달되는 데이터를 매번 새롭게 인식하기 위해
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: catalog-service
          uri: lb://CATALOG-SERVICE
          predicates: # 조건절
            - Path=/catalog-service/**
        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates: # 조건절
            - Path=/order-service/**
        - id: first-service
          uri: lb://MY-FIRST-SERVICE
          predicates: # 조건절
            - Path=/first-service/**
          filters:
#            - AddRequestHeader=first-request, first-request-header2
#            - AddResponseHeader=first-response, first-response-header2
            - CustomFilter
        - id: second-service
          uri: lb://MY-SECOND-SERVICE
          predicates: # 조건절
            - Path=/second-service/**
          filters:
#            - AddRequestHeader=second-request, second-request-header2
#            - AddResponseHeader=second-response, second-response-header2
            - name: CustomFilter
            - name: LoggingFilter
              args:
                baseMessage: Hi, there.
                preLogger: true
                postLogger: true

#token:
#  secret: user_token

management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, httpexchanges, busrefresh